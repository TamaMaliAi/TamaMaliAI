generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email           String           @unique
  password        String
  name            String
  role            UserRole
  deleted         Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  id              Int              @id @default(autoincrement())
  groups          Group[]          @relation("TeacherGroups")
  createdQuizzes  Quiz[]           @relation("TeacherQuizzes")
  assignedQuizzes QuizAssignment[]
  attempts        QuizAttempt[]
  studentGroups   StudentGroup[]
}

model Group {
  id          Int              @id @default(autoincrement())
  name        String
  deleted     Boolean          @default(false)
  teacherId   Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  teacher     User             @relation("TeacherGroups", fields: [teacherId], references: [id])
  assignments QuizAssignment[]
  students    StudentGroup[]
}

model StudentGroup {
  id        Int   @id @default(autoincrement())
  studentId Int
  groupId   Int
  group     Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  student   User  @relation(fields: [studentId], references: [id])
}

model Quiz {
  title       String
  description String?
  subject     String?
  timeLimit   Int?
  totalPoints Int
  deadline    DateTime?
  deleted     Boolean          @default(false)
  status      QuizStatus       @default(ACTIVE)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  type        QuizType
  id          Int              @id @default(autoincrement())
  teacherId   Int
  questions   Question[]
  teacher     User             @relation("TeacherQuizzes", fields: [teacherId], references: [id])
  assignments QuizAssignment[]
  attempts    QuizAttempt[]
}

model QuizAssignment {
  deleted    Boolean  @default(false)
  assignedAt DateTime @default(now())
  groupId    Int?
  id         Int      @id @default(autoincrement())
  quizId     Int
  studentId  Int?
  group      Group?   @relation(fields: [groupId], references: [id])
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student    User?    @relation(fields: [studentId], references: [id])
}

model Question {
  text      String
  type      QuestionType
  order     Int
  points    Int
  deleted   Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  id        Int              @id @default(autoincrement())
  quizId    Int
  quiz      Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options   QuestionOption[]
  answers   StudentAnswer[]
}

model QuestionOption {
  text           String
  isCorrect      Boolean         @default(false)
  deleted        Boolean         @default(false)
  id             Int             @id @default(autoincrement())
  questionId     Int
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  studentAnswers StudentAnswer[]
}

model QuizAttempt {
  score       Int
  submittedAt DateTime        @default(now())
  attemptNo   Int
  timeSpent   Int      @default(0) // Add this line - time in seconds
  deleted     Boolean         @default(false)
  id          Int             @id @default(autoincrement())
  studentId   Int
  quizId      Int
  quiz        Quiz            @relation(fields: [quizId], references: [id], onDelete: Cascade)
  student     User            @relation(fields: [studentId], references: [id])
  answers     StudentAnswer[]
}

model StudentAnswer {
  textAnswer       String?
  isCorrect        Boolean?
  deleted          Boolean         @default(false)
  listAnswer       Json?
  id               Int             @id @default(autoincrement())
  questionId       Int
  attemptId        Int
  selectedOptionId Int?
  attempt          QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question         Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption   QuestionOption? @relation(fields: [selectedOptionId], references: [id])
}

enum UserRole {
  TEACHER
  STUDENT
}

enum QuizType {
  MULTIPLE_CHOICE
  IDENTIFICATION
  ENUMERATION
}

enum QuestionType {
  IDENTIFICATION
  MULTIPLE_CHOICE
  ENUMERATION
}

enum QuizStatus {
  ACTIVE
  CLOSED
}
